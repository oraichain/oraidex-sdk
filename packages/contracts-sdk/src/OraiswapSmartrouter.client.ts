/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {AssetInfo, Addr, SwapOperation, Uint128} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg, SmartRouteMode, MigrateMsg, GetConfigResponse, GetRouteResponse, GetRoutesResponse, GetSmartRouteResponse} from "./OraiswapSmartrouter.types";
export interface OraiswapSmartrouterReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<GetConfigResponse>;
  getRoutes: ({
    inputInfo,
    outputInfo
  }: {
    inputInfo: AssetInfo;
    outputInfo: AssetInfo;
  }) => Promise<GetRoutesResponse>;
  getRoute: ({
    inputInfo,
    outputInfo,
    routeIndex
  }: {
    inputInfo: AssetInfo;
    outputInfo: AssetInfo;
    routeIndex: number;
  }) => Promise<GetRouteResponse>;
  getSmartRoute: ({
    inputInfo,
    offerAmount,
    outputInfo,
    routeMode
  }: {
    inputInfo: AssetInfo;
    offerAmount: Uint128;
    outputInfo: AssetInfo;
    routeMode?: SmartRouteMode;
  }) => Promise<GetSmartRouteResponse>;
}
export class OraiswapSmartrouterQueryClient implements OraiswapSmartrouterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.getRoutes = this.getRoutes.bind(this);
    this.getRoute = this.getRoute.bind(this);
    this.getSmartRoute = this.getSmartRoute.bind(this);
  }

  config = async (): Promise<GetConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  getRoutes = async ({
    inputInfo,
    outputInfo
  }: {
    inputInfo: AssetInfo;
    outputInfo: AssetInfo;
  }): Promise<GetRoutesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_routes: {
        input_info: inputInfo,
        output_info: outputInfo
      }
    });
  };
  getRoute = async ({
    inputInfo,
    outputInfo,
    routeIndex
  }: {
    inputInfo: AssetInfo;
    outputInfo: AssetInfo;
    routeIndex: number;
  }): Promise<GetRouteResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_route: {
        input_info: inputInfo,
        output_info: outputInfo,
        route_index: routeIndex
      }
    });
  };
  getSmartRoute = async ({
    inputInfo,
    offerAmount,
    outputInfo,
    routeMode
  }: {
    inputInfo: AssetInfo;
    offerAmount: Uint128;
    outputInfo: AssetInfo;
    routeMode?: SmartRouteMode;
  }): Promise<GetSmartRouteResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_smart_route: {
        input_info: inputInfo,
        offer_amount: offerAmount,
        output_info: outputInfo,
        route_mode: routeMode
      }
    });
  };
}
export interface OraiswapSmartrouterInterface extends OraiswapSmartrouterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    newOwner,
    newRouter
  }: {
    newOwner?: string;
    newRouter?: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setRoute: ({
    inputInfo,
    outputInfo,
    poolRoute
  }: {
    inputInfo: AssetInfo;
    outputInfo: AssetInfo;
    poolRoute: SwapOperation[];
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  deleteRoute: ({
    inputInfo,
    outputInfo,
    routeIndex
  }: {
    inputInfo: AssetInfo;
    outputInfo: AssetInfo;
    routeIndex: number;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraiswapSmartrouterClient extends OraiswapSmartrouterQueryClient implements OraiswapSmartrouterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.setRoute = this.setRoute.bind(this);
    this.deleteRoute = this.deleteRoute.bind(this);
  }

  updateConfig = async ({
    newOwner,
    newRouter
  }: {
    newOwner?: string;
    newRouter?: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        new_owner: newOwner,
        new_router: newRouter
      }
    }, _fee, _memo, _funds);
  };
  setRoute = async ({
    inputInfo,
    outputInfo,
    poolRoute
  }: {
    inputInfo: AssetInfo;
    outputInfo: AssetInfo;
    poolRoute: SwapOperation[];
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_route: {
        input_info: inputInfo,
        output_info: outputInfo,
        pool_route: poolRoute
      }
    }, _fee, _memo, _funds);
  };
  deleteRoute = async ({
    inputInfo,
    outputInfo,
    routeIndex
  }: {
    inputInfo: AssetInfo;
    outputInfo: AssetInfo;
    routeIndex: number;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      delete_route: {
        input_info: inputInfo,
        output_info: outputInfo,
        route_index: routeIndex
      }
    }, _fee, _memo, _funds);
  };
}