/**
 * This file was automatically generated by @oraichain/ts-codegen@0.35.8.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @oraichain/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {
  InstantiateMsg,
  ExecuteMsg,
  Binary,
  Cw20ReceiveMsg,
  QueryMsg,
  MigrateMsg,
  ArrayOfBid,
  Bid,
  ArrayOfBidPool,
  BidPool,
  BiddingInfoResponse,
  BiddingInfo,
  DistributionInfo,
  ArrayOfUint64,
  Config,
  EstimateAmountReceiveOfBidResponse,
  Uint64
} from "./CoharvestBidPool.types";
import { Addr, AssetInfo, Decimal, Uint128 } from "./types";
export interface CoharvestBidPoolReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  bid: ({ idx }: { idx: number }) => Promise<Bid>;
  biddingInfo: ({ round }: { round: number }) => Promise<BiddingInfoResponse>;
  lastRoundId: () => Promise<Uint64>;
  bidPool: ({ round, slot }: { round: number; slot: number }) => Promise<BidPool>;
  allBidPoolInRound: ({ round }: { round: number }) => Promise<ArrayOfBidPool>;
  allBidInRound: ({
    limit,
    round,
    startAfter
  }: {
    limit?: number;
    round: number;
    startAfter?: number;
  }) => Promise<ArrayOfBid>;
  bidsIdxByUser: ({ round, user }: { round: number; user: Addr }) => Promise<ArrayOfUint64>;
  bidsByUser: ({ round, user }: { round: number; user: Addr }) => Promise<ArrayOfBid>;
  estimateAmountReceiveOfBid: ({
    exchangeRate,
    idx,
    round
  }: {
    exchangeRate: Decimal;
    idx: number;
    round: number;
  }) => Promise<EstimateAmountReceiveOfBidResponse>;
  estimateAmountReceive: ({
    bidAmount,
    exchangeRate,
    round,
    slot
  }: {
    bidAmount: Uint128;
    exchangeRate: Decimal;
    round: number;
    slot: number;
  }) => Promise<EstimateAmountReceiveOfBidResponse>;
}
export class CoharvestBidPoolQueryClient implements CoharvestBidPoolReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.bid = this.bid.bind(this);
    this.biddingInfo = this.biddingInfo.bind(this);
    this.lastRoundId = this.lastRoundId.bind(this);
    this.bidPool = this.bidPool.bind(this);
    this.allBidPoolInRound = this.allBidPoolInRound.bind(this);
    this.allBidInRound = this.allBidInRound.bind(this);
    this.bidsIdxByUser = this.bidsIdxByUser.bind(this);
    this.bidsByUser = this.bidsByUser.bind(this);
    this.estimateAmountReceiveOfBid = this.estimateAmountReceiveOfBid.bind(this);
    this.estimateAmountReceive = this.estimateAmountReceive.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  bid = async ({ idx }: { idx: number }): Promise<Bid> => {
    return this.client.queryContractSmart(this.contractAddress, {
      bid: {
        idx
      }
    });
  };
  biddingInfo = async ({ round }: { round: number }): Promise<BiddingInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      bidding_info: {
        round
      }
    });
  };
  lastRoundId = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      last_round_id: {}
    });
  };
  bidPool = async ({ round, slot }: { round: number; slot: number }): Promise<BidPool> => {
    return this.client.queryContractSmart(this.contractAddress, {
      bid_pool: {
        round,
        slot
      }
    });
  };
  allBidPoolInRound = async ({ round }: { round: number }): Promise<ArrayOfBidPool> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_bid_pool_in_round: {
        round
      }
    });
  };
  allBidInRound = async ({
    limit,
    round,
    startAfter
  }: {
    limit?: number;
    round: number;
    startAfter?: number;
  }): Promise<ArrayOfBid> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_bid_in_round: {
        limit,
        round,
        start_after: startAfter
      }
    });
  };
  bidsIdxByUser = async ({ round, user }: { round: number; user: Addr }): Promise<ArrayOfUint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      bids_idx_by_user: {
        round,
        user
      }
    });
  };
  bidsByUser = async ({ round, user }: { round: number; user: Addr }): Promise<ArrayOfBid> => {
    return this.client.queryContractSmart(this.contractAddress, {
      bids_by_user: {
        round,
        user
      }
    });
  };
  estimateAmountReceiveOfBid = async ({
    exchangeRate,
    idx,
    round
  }: {
    exchangeRate: Decimal;
    idx: number;
    round: number;
  }): Promise<EstimateAmountReceiveOfBidResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      estimate_amount_receive_of_bid: {
        exchange_rate: exchangeRate,
        idx,
        round
      }
    });
  };
  estimateAmountReceive = async ({
    bidAmount,
    exchangeRate,
    round,
    slot
  }: {
    bidAmount: Uint128;
    exchangeRate: Decimal;
    round: number;
    slot: number;
  }): Promise<EstimateAmountReceiveOfBidResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      estimate_amount_receive: {
        bid_amount: bidAmount,
        exchange_rate: exchangeRate,
        round,
        slot
      }
    });
  };
}
export interface CoharvestBidPoolInterface extends CoharvestBidPoolReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: (
    {
      amount,
      msg,
      sender
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    _fee?: number | StdFee | "auto",
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateConfig: (
    {
      distributionToken,
      maxSlot,
      minDepositAmount,
      owner,
      premiumRatePerSlot,
      underlyingToken
    }: {
      distributionToken?: AssetInfo;
      maxSlot?: number;
      minDepositAmount?: Uint128;
      owner?: Addr;
      premiumRatePerSlot?: Decimal;
      underlyingToken?: AssetInfo;
    },
    _fee?: number | StdFee | "auto",
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  createNewRound: (
    {
      endTime,
      startTime,
      totalBidThreshold,
      totalDistribution
    }: {
      endTime: number;
      startTime: number;
      totalBidThreshold: Uint128;
      totalDistribution: Uint128;
    },
    _fee?: number | StdFee | "auto",
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  releaseDistributionInfo: (
    {
      exchangeRate,
      round
    }: {
      exchangeRate: Decimal;
      round: number;
    },
    _fee?: number | StdFee | "auto",
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  distribute: (
    {
      limit,
      round,
      startAfter
    }: {
      limit?: number;
      round: number;
      startAfter?: number;
    },
    _fee?: number | StdFee | "auto",
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  submitBid: (
    {
      premiumSlot,
      round
    }: {
      premiumSlot: number;
      round: number;
    },
    _fee?: number | StdFee | "auto",
    _memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class CoharvestBidPoolClient extends CoharvestBidPoolQueryClient implements CoharvestBidPoolInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.createNewRound = this.createNewRound.bind(this);
    this.releaseDistributionInfo = this.releaseDistributionInfo.bind(this);
    this.distribute = this.distribute.bind(this);
    this.submitBid = this.submitBid.bind(this);
  }

  receive = async (
    {
      amount,
      msg,
      sender
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    _fee: number | StdFee | "auto" = "auto",
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        receive: {
          amount,
          msg,
          sender
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
  updateConfig = async (
    {
      distributionToken,
      maxSlot,
      minDepositAmount,
      owner,
      premiumRatePerSlot,
      underlyingToken
    }: {
      distributionToken?: AssetInfo;
      maxSlot?: number;
      minDepositAmount?: Uint128;
      owner?: Addr;
      premiumRatePerSlot?: Decimal;
      underlyingToken?: AssetInfo;
    },
    _fee: number | StdFee | "auto" = "auto",
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          distribution_token: distributionToken,
          max_slot: maxSlot,
          min_deposit_amount: minDepositAmount,
          owner,
          premium_rate_per_slot: premiumRatePerSlot,
          underlying_token: underlyingToken
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
  createNewRound = async (
    {
      endTime,
      startTime,
      totalBidThreshold,
      totalDistribution
    }: {
      endTime: number;
      startTime: number;
      totalBidThreshold: Uint128;
      totalDistribution: Uint128;
    },
    _fee: number | StdFee | "auto" = "auto",
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        create_new_round: {
          end_time: endTime,
          start_time: startTime,
          total_bid_threshold: totalBidThreshold,
          total_distribution: totalDistribution
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
  releaseDistributionInfo = async (
    {
      exchangeRate,
      round
    }: {
      exchangeRate: Decimal;
      round: number;
    },
    _fee: number | StdFee | "auto" = "auto",
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        release_distribution_info: {
          exchange_rate: exchangeRate,
          round
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
  distribute = async (
    {
      limit,
      round,
      startAfter
    }: {
      limit?: number;
      round: number;
      startAfter?: number;
    },
    _fee: number | StdFee | "auto" = "auto",
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        distribute: {
          limit,
          round,
          start_after: startAfter
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
  submitBid = async (
    {
      premiumSlot,
      round
    }: {
      premiumSlot: number;
      round: number;
    },
    _fee: number | StdFee | "auto" = "auto",
    _memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        submit_bid: {
          premium_slot: premiumSlot,
          round
        }
      },
      _fee,
      _memo,
      _funds
    );
  };
}
