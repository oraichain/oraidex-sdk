/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr, InstantiateMsg, ExecuteMsg, Uint128, AssetInfo, Asset, QueryMsg, MigrateMsg, ConfigResponse} from "./IncentivesFundManager.types";
export interface IncentivesFundManagerReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
}
export class IncentivesFundManagerQueryClient implements IncentivesFundManagerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface IncentivesFundManagerInterface extends IncentivesFundManagerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    oraiswapV3,
    owner
  }: {
    oraiswapV3?: Addr;
    owner?: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  sendFund: ({
    asset,
    receiver
  }: {
    asset: Asset;
    receiver: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class IncentivesFundManagerClient extends IncentivesFundManagerQueryClient implements IncentivesFundManagerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.sendFund = this.sendFund.bind(this);
  }

  updateConfig = async ({
    oraiswapV3,
    owner
  }: {
    oraiswapV3?: Addr;
    owner?: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        oraiswap_v3: oraiswapV3,
        owner
      }
    }, _fee, _memo, _funds);
  };
  sendFund = async ({
    asset,
    receiver
  }: {
    asset: Asset;
    receiver: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send_fund: {
        asset,
        receiver
      }
    }, _fee, _memo, _funds);
  };
}