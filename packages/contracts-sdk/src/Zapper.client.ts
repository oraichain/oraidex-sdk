/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr, InstantiateMsg, ExecuteMsg, Uint128, AssetInfo, SwapOperation, AssetInfo2, Percentage2, Percentage, Asset, PoolKey2, FeeTier2, PoolKey, FeeTier, QueryMsg, MigrateMsg, Config} from "./Zapper.types";
export interface ZapperReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
}
export class ZapperQueryClient implements ZapperReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface ZapperInterface extends ZapperReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    admin,
    dexV3,
    mixedRouter
  }: {
    admin?: Addr;
    dexV3?: Addr;
    mixedRouter?: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  zapInLiquidity: ({
    amountToX,
    amountToY,
    assetIn,
    minimumReceiveX,
    minimumReceiveY,
    operationToX,
    operationToY,
    poolKey,
    tickLowerIndex,
    tickUpperIndex
  }: {
    amountToX: Uint128;
    amountToY: Uint128;
    assetIn: Asset;
    minimumReceiveX?: Uint128;
    minimumReceiveY?: Uint128;
    operationToX?: SwapOperation[];
    operationToY?: SwapOperation[];
    poolKey: PoolKey;
    tickLowerIndex: number;
    tickUpperIndex: number;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  zapOutLiquidity: ({
    minimumReceiveX,
    minimumReceiveY,
    operationFromX,
    operationFromY,
    positionIndex
  }: {
    minimumReceiveX?: Uint128;
    minimumReceiveY?: Uint128;
    operationFromX?: SwapOperation[];
    operationFromY?: SwapOperation[];
    positionIndex: number;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ZapperClient extends ZapperQueryClient implements ZapperInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.zapInLiquidity = this.zapInLiquidity.bind(this);
    this.zapOutLiquidity = this.zapOutLiquidity.bind(this);
  }

  updateConfig = async ({
    admin,
    dexV3,
    mixedRouter
  }: {
    admin?: Addr;
    dexV3?: Addr;
    mixedRouter?: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        dex_v3: dexV3,
        mixed_router: mixedRouter
      }
    }, _fee, _memo, _funds);
  };
  zapInLiquidity = async ({
    amountToX,
    amountToY,
    assetIn,
    minimumReceiveX,
    minimumReceiveY,
    operationToX,
    operationToY,
    poolKey,
    tickLowerIndex,
    tickUpperIndex
  }: {
    amountToX: Uint128;
    amountToY: Uint128;
    assetIn: Asset;
    minimumReceiveX?: Uint128;
    minimumReceiveY?: Uint128;
    operationToX?: SwapOperation[];
    operationToY?: SwapOperation[];
    poolKey: PoolKey;
    tickLowerIndex: number;
    tickUpperIndex: number;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      zap_in_liquidity: {
        amount_to_x: amountToX,
        amount_to_y: amountToY,
        asset_in: assetIn,
        minimum_receive_x: minimumReceiveX,
        minimum_receive_y: minimumReceiveY,
        operation_to_x: operationToX,
        operation_to_y: operationToY,
        pool_key: poolKey,
        tick_lower_index: tickLowerIndex,
        tick_upper_index: tickUpperIndex
      }
    }, _fee, _memo, _funds);
  };
  zapOutLiquidity = async ({
    minimumReceiveX,
    minimumReceiveY,
    operationFromX,
    operationFromY,
    positionIndex
  }: {
    minimumReceiveX?: Uint128;
    minimumReceiveY?: Uint128;
    operationFromX?: SwapOperation[];
    operationFromY?: SwapOperation[];
    positionIndex: number;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      zap_out_liquidity: {
        minimum_receive_x: minimumReceiveX,
        minimum_receive_y: minimumReceiveY,
        operation_from_x: operationFromX,
        operation_from_y: operationFromY,
        position_index: positionIndex
      }
    }, _fee, _memo, _funds);
  };
}